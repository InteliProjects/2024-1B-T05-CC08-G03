lexer grammar fofi;

PROGRAMA: 'programa';
VAR: 'var';
TYPE: ('binario' |'numero' | 'texto');
SE: 'se';
SENAO: 'senao';
ENQUANTO: 'enquanto';
REPITA:  'repita';
BOOL: 'v' | 'f';
ASSIGN: ':';
COMMA:',';
SEMICOLON: ';';
DQUOTE: '"';
NAO: 'nao';
LPAR: '(';
RPAR: ')';
LBLOCK: '{';
RBLOCK: '}';
FUNCIN: ('ler_numero' |'ler_binario' |'ler' |'consultar' |'criar_figura' |'criar_imagem' |'colidiu' | 'aleatorio');
FUNCOUT: ('mostrar'|'limpar'|'inicializar_com_cor'|'inicializar_com_imagem'|'redefinir_figura'|'redefinir_imagem'|'mover'|'destacar'|'reverter_destaque'|'tocar'|'esperar');
OPREL: '='|'!='|'<'|'<='|'>'|'>=';
OPSUM:'+'|'-'|'ou';
OPMUL:'*'|'/'|'%'|'e';
OPPOW:'^';
ID: [a-zA-Z][_a-zA-Z0-9]*;
INT: [0-9]+; 
STR: DQUOTE (~["\\]* ('\\' . | ~["\\])*) DQUOTE;
WS: (' '|'\t'|'\r'|'\n' ) -> skip;